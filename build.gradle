import org.apache.tools.ant.taskdefs.condition.Os

repositories {
    jcenter()
    mavenCentral()
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/groups/public/"}
}

buildscript {
    ext {
        drivers = ["firefox", "chrome", "phantomJs"]

        serenity_version = '1.8.21'
        serenity_cucumber_version = '1.6.10'
        serenity_jira_version = '1.8.0'
        chromeDriverVersion = '2.35'
        phantomJsVersion = '2.1.1'
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath('net.serenity-bdd:serenity-gradle-plugin:' + serenity_version)
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'net.serenity-bdd.aggregator'
apply from: "gradle/idea.gradle"
apply from: "gradle/osSpecificDownloads.gradle"

idea {
    module {
        excludeDirs += [file('target'), file('history')]
    }
}
dependencies {

    testCompile 'junit:junit:4.12'
    testCompile 'org.postgresql:postgresql:42.1.4'

    testCompile 'net.serenity-bdd:serenity-cucumber:' + serenity_cucumber_version
    testCompile 'net.serenity-bdd:serenity-jira-plugin:' + serenity_jira_version

    testCompile 'net.serenity-bdd:serenity-core:' + serenity_version
    testCompile 'net.serenity-bdd:serenity-junit:' + serenity_version
    testCompile 'net.serenity-bdd:serenity-rest-assured:' + serenity_version
    testCompile 'net.serenity-bdd:serenity-screenplay:' + serenity_version
    testCompile 'net.serenity-bdd:serenity-screenplay-webdriver:' + serenity_version

    testCompile 'com.googlecode.lambdaj:lambdaj:2.3.3'
    testCompile 'com.googlecode.json-simple:json-simple:1.1.1'
    testCompile 'org.slf4j:slf4j-simple:1.7.25'

    testCompile 'org.codehaus.groovy:groovy-all:2.4.13'
    testCompile 'org.apache.commons:commons-csv:1.5'
    testCompile 'com.xlson.groovycsv:groovycsv:1.3'
    testCompile 'com.opencsv:opencsv:4.1'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile 'net.javacrumbs.json-unit:json-unit:1.15.0'
    testCompile 'org.projectlombok:lombok:1.16.20'
    // Dependency to use SSH within groovy
    testCompile "com.jcraft:jsch:0.1.54"

    // Dependency to connect to MS SQL Server from groovy
    testCompile "net.sourceforge.jtds:jtds:1.3.1"
    testCompile "com.microsoft.sqlserver:sqljdbc4:4.0"

    // Dependency to read and traverse through the json file
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        maxParallelForks = (Runtime.runtime.availableProcessors() / 2) + 1
        finalizedBy(aggregate)
    }
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

gradle.startParameter.continueOnFailure = true
